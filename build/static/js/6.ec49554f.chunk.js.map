{"version":3,"sources":["views/Account/Login/index.jsx","libs/axios.js","services/login.ts"],"names":["LoginView","props","useGlobalContext","setUserInfo","userInfo","useState","state","message","loginResult","setLoginResult","loginData","setLoginData","login","a","id","res","LoginService","guestLogin","error","console","log","data","result","name","auth_level","localStorage","setItem","JSON","stringify","history","push","href","rel","src","style","height","className","position","top","margin","initialValues","password","validationSchema","Yup","shape","required","test","value","values","parent","_password","chk_num","search","chk_eng","onSubmit","resetForm","setErrors","setSubmitting","errors","handleBlur","handleSubmit","handleChange","submitCount","touched","setFieldValue","htmlFor","type","placeholder","onBlur","e","onChange","target","textAlign","float","width","onClick","alt","filter","padding","axios","defaults","withCredentials","HTTP_METHOD","request","method","path","axiosRequest","statusCode","refresh","methods","refresh_N_reReq","window","location","undefined","config","url","timeout","process","_method","String","toUpperCase","indexOf","headers","Date","now","qs","getConfig","promise","Promise","resolve","reject","then","response","catch","params"],"mappings":"sOAkMeA,UAzLG,SAAAC,GAAU,IAAD,EACWC,cAAhBC,GADK,EACfC,SADe,EACLD,aADK,EAEeE,mBAAS,CAACC,OAAO,EAAMC,QAAS,KAF/C,mBAEhBC,EAFgB,KAEHC,EAFG,OAGWJ,mBAAS,MAHpB,mBAGhBK,EAHgB,KAGLC,EAHK,KAKjBC,EAAK,uCAAG,4CAAAC,EAAA,yDAAOC,EAAP,+BAAU,KAChBC,EAAM,GACA,SAAND,EAFM,gCAGME,IAAaC,WAAW,CAACH,GAAI,UAHnC,OAGNC,EAHM,+CAKMC,IAAaJ,MAAMF,GALzB,QAKNK,EALM,eAONA,EAAIG,OACJC,QAAQC,IAAIL,EAAIG,OAChBT,EAAe,CAACH,OAAO,EAAOC,QAAUQ,EAAIG,MAAMX,YAE5Cc,EAAON,EAAIO,OAAOD,KACxBlB,EAAY,CAACW,GAAIO,EAAKP,GAAIS,KAAMF,EAAKE,KAAMC,WAAYH,EAAKG,aAC5DC,aAAaC,QAAQ,WAAYC,KAAKC,UAAU,CAACd,GAAIO,EAAKP,GAAIS,KAAMF,EAAKE,KAAMC,WAAYH,EAAKG,cAChGvB,EAAM4B,QAAQC,KAAK,cAdb,4CAAH,qDAkBX,OACI,qCACI,sBAAMC,KAAK,kEAAkEC,IAAI,aAAalB,GAAG,kBACjG,wBAAQmB,IAAI,kEACZ,wBAAQA,IAAI,2CACZ,qBAAKC,MAAO,CAACC,OAAS,QAAtB,SACI,yBAASC,UAAU,cAAcF,MAAO,CAACG,SAAW,WAAYC,IAAK,MAAOC,OAAQ,gBAApF,SACI,qBAAKH,UAAU,YAAf,SACI,sBAAKA,UAAU,MAAf,UACI,sBAAKA,UAAU,qBAAf,UACI,oBAAIA,UAAU,cAAd,uBACA,cAAC,IAAD,CACIA,UAAU,aACVI,cAAe,CACX1B,GAAI,GACJ2B,SAAU,IAEdC,iBAAkBC,MAAaC,MAAM,CACjC9B,GAAI6B,MAAaE,SAAS,kEACzBC,KAAK,WAAY,uIAAmC,SAACC,EAAOC,GAEzD,MAAO,sBAAsBF,KAAKE,EAAOC,OAAOnC,OAEpD2B,SAAUE,MAAaE,SAAS,wEAC/BC,KAAK,iBAAkB,+JAAsC,SAACC,EAAOC,GAClE,GAAIA,EAAOC,OAAOR,SAAU,CACxB,IAAMS,EAAYF,EAAOC,OAAOR,SAChC,IAAI,qEAAqEK,KAAKI,GAC1E,OAAO,EAGX,IAAIC,EAAUD,EAAUE,OAAO,UAC3BC,EAAUH,EAAUE,OAAO,WAC/B,QAAID,EAAS,GAAKE,EAAS,SAQvCC,SAAU,SAACN,EAAD,GAA4D,EAAjD/C,MAAiD,EAA1CsD,UAA0C,EAA/BC,UAA+B,EAApBC,cAC9C7C,EAAMoC,IA/Bd,SAkCC,YASK,IARFU,EAQC,EARDA,OACAC,EAOC,EAPDA,WAEAC,GAKC,EANDC,aAMC,EALDD,cACAE,EAIC,EAJDA,YACAC,EAGC,EAHDA,QACAf,EAEC,EAFDA,OACAgB,EACC,EADDA,cAEA,OACI,uBAAM5B,UAAU,aAAakB,SAAUM,EAAvC,UACI,sBAAKxB,UAAU,aAAf,UACI,uBAAO6B,QAAQ,qBAAqB7B,UAAU,iBAA9C,gBACA,uBAAO8B,KAAK,OAAO9B,UAAU,eAAe+B,YAAY,iEACpD5C,KAAK,KACLT,GAAG,KACHiC,MAAOC,EAAOlC,GACdsD,OAAQ,SAACC,GACLV,EAAWU,IAEfC,SAAU,SAACD,GACJA,EAAEE,SACD5D,EAAa,2BAAID,GAAL,IAAgBI,GAAIuD,EAAEE,OAAOxB,SACzCiB,EAAc,KAAMK,EAAEE,OAAOxB,YAKvCgB,EAAQjD,IAAMgD,EAAc,IAAM,mBAAG1B,UAAU,wBAAwBF,MAAO,CAACK,OAAS,aAAtD,SAAqEmB,EAAO5C,QAEpH,sBAAKsB,UAAU,aAAf,UACI,uBAAO6B,QAAQ,wBAAwB7B,UAAU,iBAAjD,sBACA,uBAAO8B,KAAK,WAAW9B,UAAU,eAAe+B,YAAY,uEACxD5C,KAAK,WACLT,GAAG,WACHiC,MAAOC,EAAOP,SACd2B,OAAQ,SAACC,GACLV,EAAWU,IAEfC,SAAU,SAACD,GACJA,EAAEE,SACD5D,EAAa,2BAAID,GAAL,IAAgB+B,SAAU4B,EAAEE,OAAOxB,SAC/CiB,EAAc,WAAYK,EAAEE,OAAOxB,YAI7CgB,EAAQtB,UAAYqB,EAAc,IAAM,mBAAG1B,UAAU,wBAAwBF,MAAO,CAACK,OAAS,aAAtD,SAAqEmB,EAAOjB,cAW1H,sBAAKP,MAAO,CAACsC,UAAY,SAAzB,WAKOhE,EAAYF,OAAS,qBAAK4B,MAAO,CAACuC,MAAO,QAApB,SAA6B,mBAAGrC,UAAU,wBAAb,SAAsC5B,EAAYD,YACvG,wBAAQ2D,KAAK,SAAShC,MAAO,CAACwC,MAAQ,WAAatC,UAAU,gBAA7D,sBAEJ,qBAAKF,MAAO,CAACsC,UAAY,SAAzB,SACI,wBAAQpC,UAAU,gBAAgBF,MAAO,CAACwC,MAAQ,UAAWnC,OAAQ,aACrEoC,QAAS,SAACN,GACNzD,EAAM,UAFV,2BAShB,sBAAKwB,UAAU,YAAf,0BAAwC,mBAAGA,UAAU,gBAArD,kBAEJ,qBAAKA,UAAU,sBAAf,SACI,eAAC,WAAD,WACI,sBAAKA,UAAU,uBAAf,UACI,qBAAKA,UAAU,oBAAoBH,IAAI,0DAA0D2C,IAAI,cAAc1C,MAAO,CAAC2C,OAAS,qBACpI,qBAAKzC,UAAU,8BAAf,SACI,sBAAKA,UAAU,cAAf,UACI,+CACA,oBAAGF,MAAO,CAAEsC,UAAW,QAAvB,gFACyC,uBAAK,uBAD9C,sGAE4B,uBAF5B,8HAQZ,sBAAKpC,UAAU,uBAAf,UACA,qBAAKA,UAAU,oBAAoBH,IAAI,sEAAsE2C,IAAI,cAAc1C,MAAO,CAAC2C,OAAS,qBAC5I,qBAAKzC,UAAU,8BAAf,SACI,sBAAKA,UAAU,cAAf,UACI,0CACA,oBAAGF,MAAO,CAAEsC,UAAW,QAAvB,iEAC0B,uBAD1B,iBAEkB,uBACd,sBAAMtC,MAAO,CAAC4C,QAAS,cAAvB,yF,qIChLpDC,IAAMC,SAASC,iBAAkB,EAEjC,IAAMC,EACG,MAwCHC,EAAO,uCAAG,WAAOC,EAAQC,EAAMhE,GAArB,iBAAAR,EAAA,+EAGeyE,EAAaF,EAAQC,EAAMhE,GAH1C,uBAGDC,EAHC,EAGDA,OAHC,kBAID,CAACA,WAJA,mCAMgB,KAApB,KAAMiE,WANF,kCAOSC,EAAQC,QAASJ,EAAMhE,GAPhC,yIAAH,0DAcPmE,EAAO,uCAAG,WAAOC,EAASJ,EAAMhE,GAAtB,iBAAAR,EAAA,sEACkB6E,EAAgBN,OAAQC,EAAMhE,GADhD,mBACLC,EADK,EACLA,QADK,EACGJ,MADH,gBAGRyE,OAAOC,SAAS7D,KAAO,kBAHf,gDAKD,CAACT,WALA,4CAAH,0DASPoE,EAAkB,SAACN,EAAQC,EAAMhE,GAAU,IACtCH,EAASoE,EAAa,MAAO,qBAAiBO,GAA9C3E,MACP,OAAIA,EACO,CAACI,OAAQ,KAAMJ,SAEfoE,EAAaF,EAAQC,EAAMhE,IAIpCiE,EAAe,SAACF,EAAQC,EAAMhE,GAChC,IAAMyE,EAnEQ,SAACV,EAAQC,EAAMhE,GAC7B,IAAI0E,EAAG,iBAAaV,GAEhBW,EAAUC,OACVC,EAAU,IAAIC,OAAOf,GACrBc,GAAqC,SAA1BA,EAAQE,eAAsD,IAA1BL,EAAIM,QAAQ,YAC3DL,EAAU,MAGd,IAAIF,EAAS,CACTE,QAASA,EACTZ,OAAQc,EAAQE,cAChBL,MACAO,QAAS,CACL,8BAA+BL,oBAC/B,+BAAgC,yCAChC,+BAAgC,uBAChC,OAAU,mBACV,kBAAmB,QACnB,kBAAmBM,KAAKC,QAYhC,OARInF,IACIyE,EAAOV,SAAWF,GAClBa,EAAMA,GAAOA,EAAIM,QAAQ,KAAO,EAAI,IAAM,KAAOI,IAAG7E,UAAUP,GAC9DyE,EAAOC,IAAMA,GAEbD,EAAOzE,KAAOA,GAGfyE,EAoCQY,CAAUtB,EAAQC,EAAMhE,GACjCsF,EAAU5B,IAAMe,GAEtB,OAAO,IAAIc,SAAQ,SAACC,EAASC,GACzBH,EACKI,MAAK,SAACC,GACH7F,QAAQC,IAAI4F,GACZH,EAAQ,CAACvF,OAAQ0F,EAAS3F,UAE7B4F,OAAM,SAAC/F,GAC8B,iBAAvBA,EAAM8F,SAAS3F,OACtBsE,OAAOC,SAAS7D,KAAO,UAE3B+E,EAAO,CAAC5F,MAAOA,EAAM8F,SAAS3F,cAK/B8D,IC7FTnE,E,qFACF,SAAMkG,GACF,OAAOnC,EAAM,OAAQ,cAAemC,K,oBAExC,SAAOA,GACH,OAAOnC,EAAM,OAAQ,eAAgBmC,K,wBAEzC,SAAWA,GACP,OAAOnC,EAAM,OAAQ,oBAAqBmC,K,yBAE9C,SAAYA,GACR,OAAOnC,EAAM,OAAQ,qBAAsBmC,O,KAIpC,QAAIlG","file":"static/js/6.ec49554f.chunk.js","sourcesContent":["import { Carousel } from 'react-responsive-carousel';\r\nimport 'assets/css/login.css'\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport { Formik } from 'formik'\r\nimport { useState } from 'react'\r\nimport * as Yup from 'yup'\r\nimport LoginService from 'services/login'\r\nimport {useGlobalContext} from 'contexts/GlobalContext';\r\n\r\nconst LoginView = props => {\r\n    const { userInfo, setUserInfo } = useGlobalContext();\r\n    const [loginResult, setLoginResult] = useState({state: true, message: ''});\r\n    const [loginData, setLoginData] = useState(null);\r\n\r\n    const login = async (id=null) => {\r\n        let res = {};\r\n        if (id == 'guest') {\r\n            res = await LoginService.guestLogin({id: 'guest'});\r\n        } else {\r\n            res = await LoginService.login(loginData);\r\n        }        \r\n        if (res.error) {\r\n            console.log(res.error)\r\n            setLoginResult({state: false, message : res.error.message});\r\n        } else  {\r\n            const data = res.result.data;\r\n            setUserInfo({id :data.id, name: data.name, auth_level: data.auth_level});\r\n            localStorage.setItem('userInfo', JSON.stringify({id :data.id, name: data.name, auth_level: data.auth_level}));\r\n            props.history.push(\"/contents\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" rel=\"stylesheet\" id=\"bootstrap-css\"/>\r\n            <script src=\"//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\"></script>\r\n            <script src=\"//code.jquery.com/jquery-1.11.1.min.js\"></script>\r\n            <div style={{height : \"100%\"}}>\r\n                <section className=\"login-block\" style={{position : \"absolute\", top: \"50%\", margin: \"-350px 0 0 0\"}}>\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-4 login-sec\">\r\n                                <h2 className=\"text-center\">Login Now</h2>\r\n                                <Formik\r\n                                    className=\"login-form\"\r\n                                    initialValues={{\r\n                                        id: '',\r\n                                        password: '',\r\n                                    }}\r\n                                    validationSchema={Yup.object().shape({\r\n                                        id: Yup.string().required('아이디를 입력바랍니다.')\r\n                                        .test('id_valid', '아이디는 4~20자의 영문 또는 영문+숫자만 가능합니다.', (value, values) => {\r\n                                            \r\n                                            return /^[a-zA-Z0-9]{4,20}$/.test(values.parent.id)\r\n                                        }),\r\n                                        password: Yup.string().required('비빌번호를 입력바랍니다.')\r\n                                        .test('password_valid', '비밀번호는 8~20자의 영문+숫자+특수문자의 조합만 가능합니다.',(value, values) => {\r\n                                            if (values.parent.password) {\r\n                                                const _password = values.parent.password;\r\n                                                if(!/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,20}$/.test(_password)) {\r\n                                                    return false\r\n                                                }\r\n    \r\n                                                let chk_num = _password.search(/[0-9]/g);\r\n                                                let chk_eng = _password.search(/[a-z]/ig);\r\n                                                if (chk_num <0 || chk_eng <0) {\r\n                                                    return false;\r\n                                                }\r\n                                                return true;\r\n                                            }\r\n                                            \r\n                                        }),\r\n                                    })}\r\n                                    onSubmit={(values, { props, resetForm, setErrors, setSubmitting }) => {\r\n                                        login(values);\r\n                                    }}\r\n                                >\r\n                                {({\r\n                                    errors,\r\n                                    handleBlur,\r\n                                    handleChange,\r\n                                    handleSubmit,\r\n                                    submitCount,\r\n                                    touched,\r\n                                    values,\r\n                                    setFieldValue\r\n                                })=> { \r\n                                    return (\r\n                                        <form className=\"login-form\" onSubmit={handleSubmit}>\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"exampleInputEmail1\" className=\"text-uppercase\">ID</label>\r\n                                                <input type=\"text\" className=\"form-control\" placeholder=\"아이디를 입력해주세요.\" \r\n                                                    name=\"id\"\r\n                                                    id=\"id\"\r\n                                                    value={values.id}\r\n                                                    onBlur={(e) => {\r\n                                                        handleBlur(e)\r\n                                                    }}\r\n                                                    onChange={(e) => {\r\n                                                        if(e.target) {\r\n                                                            setLoginData({...loginData, id: e.target.value});\r\n                                                            setFieldValue('id', e.target.value)\r\n                                                        }                                                        \r\n                                                    }}\r\n                                                />\r\n                                                {/* {(touched.id || submitCount > 0) && <p className=\"info-message negative\">{`ID는 4~20글자의 영문만 입력 가능합니다.`}</p>} */}\r\n                                                {(touched.id || submitCount > 0) && <p className=\"info-message negative\" style={{margin : \"5px 0 0 0\"}}>{errors.id}</p>}\r\n                                            </div>\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"exampleInputPassword1\" className=\"text-uppercase\">Password</label>\r\n                                                <input type=\"password\" className=\"form-control\" placeholder=\"비밀번호를 입력해주세요.\"\r\n                                                    name=\"password\"\r\n                                                    id=\"password\"\r\n                                                    value={values.password}\r\n                                                    onBlur={(e) => {\r\n                                                        handleBlur(e)\r\n                                                    }}\r\n                                                    onChange={(e) => {\r\n                                                        if(e.target) {\r\n                                                            setLoginData({...loginData, password: e.target.value});\r\n                                                            setFieldValue('password', e.target.value)\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n                                                {(touched.password || submitCount > 0) && <p className=\"info-message negative\" style={{margin : \"5px 0 0 0\"}}>{errors.password}</p>}\r\n                                            </div>\r\n                                            \r\n                                            {/* <div style={{margin: \"20px 0 0 0\"}}>\r\n                                                \r\n                                                <button className=\"btn btn-login float-right\" style={{width : \"76.05px\"}} \r\n                                                    onClick={(e) => {\r\n                                                        login({id: \"guest\", password: \"password\"});\r\n                                                }}>Guest</button>                                        \r\n                                            </div>   */}\r\n                                            \r\n                                            <div style={{textAlign : \"right\"}}>\r\n                                                {/* <label className=\"form-check-label\">\r\n                                                <input type=\"checkbox\" className=\"form-check-input\"/>\r\n                                                <small>Remember Me</small>\r\n                                                </label> */}       \r\n                                                { !loginResult.state && <div style={{float: \"left\"}}><p className=\"info-message negative\">{loginResult.message}</p></div>}              \r\n                                                <button type=\"submit\" style={{width : \"76.05px\"}}  className=\"btn btn-login\">Login</button>          \r\n                                            </div>                        \r\n                                            <div style={{textAlign : \"right\"}}>\r\n                                                <button className=\"btn btn-login\" style={{width : \"76.05px\", margin: \"7px 0 0 0\"}} \r\n                                                onClick={(e) => {\r\n                                                    login('guest');\r\n                                                }}>Guest</button>\r\n                                            </div>\r\n                                        </form>\r\n                                    )\r\n                                }}    \r\n                                </Formik>\r\n                                <div className=\"copy-text\">Created with <i className=\"fa fa-heart\"></i> by Jskim</div>\r\n                            </div>\r\n                            <div className=\"col-md-8 banner-sec\">\r\n                                <Carousel>\r\n                                    <div className=\"carousel-item active\">\r\n                                        <img className=\"d-block img-fluid\" src=\"https://static.pexels.com/photos/33972/pexels-photo.jpg\" alt=\"First slide\" style={{filter : \"brightness(65%)\"}}/>\r\n                                        <div className=\"carousel-caption d-md-block\">\r\n                                            <div className=\"banner-text\">\r\n                                                <h2>WEB Developer</h2>\r\n                                                <p style={{ textAlign :\"left\"}}>\r\n                                                    Web Frontend & Backend 개발자 김종성's Blog<br/><br/>\r\n                                                    저의 Blog의 방문해주신 것을 환영합니다.<br/>\r\n                                                    처음 오신분은 Guest로 입장해주시기 바랍니다.\r\n                                                </p>                                                \r\n                                            </div>\t\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"carousel-item active\">\r\n                                    <img className=\"d-block img-fluid\" src=\"https://images.pexels.com/photos/7097/people-coffee-tea-meeting.jpg\" alt=\"First slide\" style={{filter : \"brightness(65%)\"}}/>\r\n                                        <div className=\"carousel-caption d-md-block\">\r\n                                            <div className=\"banner-text\">\r\n                                                <h2>Go-Ahead</h2>\r\n                                                <p style={{ textAlign :\"left\"}}>\r\n                                                    WEB Study를 위한 Blog입니다.<br/>\r\n                                                    Developped by <br/>\r\n                                                    <span style={{padding: \"0 0 0 20px\"}}>Nest.js, React, Mysql, Nginx, Docker, jenkins</span>\r\n                                                </p>\r\n                                            </div>\t\r\n                                        </div>\r\n                                    </div>\r\n                                </Carousel>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginView\r\n","import axios from 'axios';\r\nimport qs from 'qs'\r\naxios.defaults.withCredentials = true\r\n\r\nconst HTTP_METHOD = {\r\n    GET: 'GET',\r\n    POST: 'POST',\r\n    PUT: 'PUT',\r\n    DELETE: 'DELETE',\r\n}\r\n\r\nconst getConfig = (method, path, data) => {\r\n    let url = `/api/v1${path}`;\r\n\r\n    let timeout = process.env.REACT_APP_API_TIMEOUT\r\n    let _method = new String(method);\r\n    if (_method && _method.toUpperCase() === 'POST' && url.indexOf('upload') === 0) {\r\n        timeout = 120000\r\n    }\r\n\r\n    let config = {\r\n        timeout: timeout,\r\n        method: _method.toUpperCase(),\r\n        url,\r\n        headers: {\r\n            'Access-Control-Allow-Origin': process.env.REACT_APP_TARGET,\r\n            'Access-Control-Allow-Methods': 'GET, POST, PATCH, PUT, DELETE, OPTIONS',\r\n            'Access-Control-Allow-Headers': 'Origin, Content-Type',\r\n            'Accept': 'application/json',\r\n            'Accept-Language': 'ko_KR',\r\n            'Transaction-Key': Date.now()\r\n        }\r\n    }\r\n\r\n    if (data) {\r\n        if (config.method === HTTP_METHOD.GET) {\r\n            url = url + (url.indexOf('?') > 0 ? '&' : '?') + qs.stringify(data);\r\n            config.url = url;\r\n        } else {\r\n            config.data = data;\r\n        }\r\n    }\r\n    return config\r\n}\r\n\r\nconst request = async (method, path, data) => {\r\n\r\n    try {\r\n        const {result} = await axiosRequest(method, path, data);\r\n        return {result};\r\n    } catch (error) {\r\n        if (error.statusCode == 401) {  //AccessToken 만료 시 refresh\r\n            return await refresh(methods, path, data);\r\n        } else {\r\n            return error;\r\n        }\r\n    }\r\n}\r\n\r\nconst refresh = async (methods, path, data) => {\r\n    const {result, error} = await refresh_N_reReq(method, path, data); //재발급 및 재요청\r\n    if (error) {\r\n        window.location.href = '/accounts/login';\r\n    } else {\r\n        return {result};\r\n    }\r\n}\r\n\r\nconst refresh_N_reReq = (method, path, data) => {\r\n    const {error} = axiosRequest('get', '/auth/refresh', undefined);\r\n    if (error) {    //RefreshToken도 만료 됨\r\n        return {result: null, error};\r\n    } else {        //AccessToken 재발급 후 재 request 요청\r\n        return axiosRequest(method, path, data);\r\n    }\r\n}\r\n\r\nconst axiosRequest = (method, path, data) => {\r\n    const config = getConfig(method, path, data);\r\n    const promise = axios(config);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        promise\r\n            .then((response) => {\r\n                console.log(response);\r\n                resolve({result: response.data});\r\n            })\r\n            .catch((error) => {\r\n                if (typeof error.response.data == 'string') {\r\n                    window.location.href = '/error'\r\n                }\r\n                reject({error: error.response.data});\r\n            })\r\n    })\r\n}\r\n\r\nexport default request;","import { axios } from 'libs/index';\r\nimport { useGlobalContext } from 'contexts/GlobalContext'\r\n\r\nclass LoginService {\r\n    login(params: any) {\r\n        return axios('POST', '/auth/login', params);\r\n    }\r\n    logout(params: any) {\r\n        return axios('POST', '/auth/logout', params);\r\n    }\r\n    guestLogin(params: any) {\r\n        return axios('POST', '/auth/login/guest', params);\r\n    }\r\n    guestLogout(params: any) {\r\n        return axios('POST', '/auth/logout/guest', params);\r\n    }\r\n}\r\n\r\nexport default new LoginService();\r\n"],"sourceRoot":""}