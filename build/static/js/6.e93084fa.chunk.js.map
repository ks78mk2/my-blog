{"version":3,"sources":["views/Account/Login/index.jsx","libs/axios.js","services/login.ts"],"names":["LoginView","props","_useGlobalContext","useGlobalContext","setUserInfo","userInfo","_useState","useState","state","message","_useState2","_slicedToArray","loginResult","setLoginResult","_useState3","_useState4","loginData","setLoginData","login","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","res","data","_args","arguments","wrap","_context","prev","next","length","undefined","LoginService","guestLogin","sent","error","console","log","result","name","auth_level","localStorage","setItem","JSON","stringify","history","push","stop","apply","_jsxs","_Fragment","children","_jsx","href","rel","src","style","height","className","position","top","margin","Formik","initialValues","password","validationSchema","Yup","shape","required","test","value","values","parent","_password","chk_num","search","chk_eng","onSubmit","_ref2","resetForm","setErrors","setSubmitting","_ref3","errors","handleBlur","handleSubmit","handleChange","submitCount","touched","setFieldValue","htmlFor","type","placeholder","onBlur","e","onChange","target","_objectSpread","textAlign","float","width","onClick","Carousel","alt","filter","padding","axios","defaults","withCredentials","HTTP_METHOD","request","method","path","_yield$axiosRequest","axiosRequest","abrupt","t0","statusCode","refresh","methods","_x","_x2","_x3","_callee2","_yield$refresh_N_reRe","_context2","refresh_N_reReq","window","location","_x4","_x5","_x6","config","url","concat","timeout","process","_method","String","toUpperCase","indexOf","headers","Date","now","qs","getConfig","promise","Promise","resolve","reject","then","response","catch","_classCallCheck","_createClass","key","params"],"mappings":"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","file":"static/js/6.e93084fa.chunk.js","sourcesContent":["import { Carousel } from 'react-responsive-carousel';\r\nimport 'assets/css/login.css'\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport { Formik } from 'formik'\r\nimport { useState } from 'react'\r\nimport * as Yup from 'yup'\r\nimport LoginService from 'services/login'\r\nimport {useGlobalContext} from 'contexts/GlobalContext';\r\n\r\nconst LoginView = props => {\r\n    const { userInfo, setUserInfo } = useGlobalContext();\r\n    const [loginResult, setLoginResult] = useState({state: true, message: ''});\r\n    const [loginData, setLoginData] = useState(null);\r\n\r\n    const login = async (id=null) => {\r\n        let res = {};\r\n        if (id == 'guest') {\r\n            res = await LoginService.guestLogin({id: 'guest'});\r\n        } else {\r\n            res = await LoginService.login(loginData);\r\n        }        \r\n        if (res.error) {\r\n            console.log(res.error)\r\n            setLoginResult({state: false, message : res.error.message});\r\n        } else  {\r\n            const data = res.result.data;\r\n            setUserInfo({id :data.id, name: data.name, auth_level: data.auth_level});\r\n            localStorage.setItem('userInfo', JSON.stringify({id :data.id, name: data.name, auth_level: data.auth_level}));\r\n            props.history.push(\"/contents\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" rel=\"stylesheet\" id=\"bootstrap-css\"/>\r\n            <script src=\"//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\"></script>\r\n            <script src=\"//code.jquery.com/jquery-1.11.1.min.js\"></script>\r\n            <div style={{height : \"100%\"}}>\r\n                <section className=\"login-block\" style={{position : \"absolute\", top: \"50%\", margin: \"-350px 0 0 0\"}}>\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-4 login-sec\">\r\n                                <h2 className=\"text-center\">Login Now</h2>\r\n                                <Formik\r\n                                    className=\"login-form\"\r\n                                    initialValues={{\r\n                                        id: '',\r\n                                        password: '',\r\n                                    }}\r\n                                    validationSchema={Yup.object().shape({\r\n                                        id: Yup.string().required('아이디를 입력바랍니다.')\r\n                                        .test('id_valid', '아이디는 4~20자의 영문 또는 영문+숫자만 가능합니다.', (value, values) => {\r\n                                            \r\n                                            return /^[a-zA-Z0-9]{4,20}$/.test(values.parent.id)\r\n                                        }),\r\n                                        password: Yup.string().required('비빌번호를 입력바랍니다.')\r\n                                        .test('password_valid', '비밀번호는 8~20자의 영문+숫자+특수문자의 조합만 가능합니다.',(value, values) => {\r\n                                            if (values.parent.password) {\r\n                                                const _password = values.parent.password;\r\n                                                if(!/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,20}$/.test(_password)) {\r\n                                                    return false\r\n                                                }\r\n    \r\n                                                let chk_num = _password.search(/[0-9]/g);\r\n                                                let chk_eng = _password.search(/[a-z]/ig);\r\n                                                if (chk_num <0 || chk_eng <0) {\r\n                                                    return false;\r\n                                                }\r\n                                                return true;\r\n                                            }\r\n                                            \r\n                                        }),\r\n                                    })}\r\n                                    onSubmit={(values, { props, resetForm, setErrors, setSubmitting }) => {\r\n                                        login(values);\r\n                                    }}\r\n                                >\r\n                                {({\r\n                                    errors,\r\n                                    handleBlur,\r\n                                    handleChange,\r\n                                    handleSubmit,\r\n                                    submitCount,\r\n                                    touched,\r\n                                    values,\r\n                                    setFieldValue\r\n                                })=> { \r\n                                    return (\r\n                                        <form className=\"login-form\" onSubmit={handleSubmit}>\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"exampleInputEmail1\" className=\"text-uppercase\">ID</label>\r\n                                                <input type=\"text\" className=\"form-control\" placeholder=\"아이디를 입력해주세요.\" \r\n                                                    name=\"id\"\r\n                                                    id=\"id\"\r\n                                                    value={values.id}\r\n                                                    onBlur={(e) => {\r\n                                                        handleBlur(e)\r\n                                                    }}\r\n                                                    onChange={(e) => {\r\n                                                        if(e.target) {\r\n                                                            setLoginData({...loginData, id: e.target.value});\r\n                                                            setFieldValue('id', e.target.value)\r\n                                                        }                                                        \r\n                                                    }}\r\n                                                />\r\n                                                {/* {(touched.id || submitCount > 0) && <p className=\"info-message negative\">{`ID는 4~20글자의 영문만 입력 가능합니다.`}</p>} */}\r\n                                                {(touched.id || submitCount > 0) && <p className=\"info-message negative\" style={{margin : \"5px 0 0 0\"}}>{errors.id}</p>}\r\n                                            </div>\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"exampleInputPassword1\" className=\"text-uppercase\">Password</label>\r\n                                                <input type=\"password\" className=\"form-control\" placeholder=\"비밀번호를 입력해주세요.\"\r\n                                                    name=\"password\"\r\n                                                    id=\"password\"\r\n                                                    value={values.password}\r\n                                                    onBlur={(e) => {\r\n                                                        handleBlur(e)\r\n                                                    }}\r\n                                                    onChange={(e) => {\r\n                                                        if(e.target) {\r\n                                                            setLoginData({...loginData, password: e.target.value});\r\n                                                            setFieldValue('password', e.target.value)\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n                                                {(touched.password || submitCount > 0) && <p className=\"info-message negative\" style={{margin : \"5px 0 0 0\"}}>{errors.password}</p>}\r\n                                            </div>\r\n                                            \r\n                                            {/* <div style={{margin: \"20px 0 0 0\"}}>\r\n                                                \r\n                                                <button className=\"btn btn-login float-right\" style={{width : \"76.05px\"}} \r\n                                                    onClick={(e) => {\r\n                                                        login({id: \"guest\", password: \"password\"});\r\n                                                }}>Guest</button>                                        \r\n                                            </div>   */}\r\n                                            \r\n                                            <div style={{textAlign : \"right\"}}>\r\n                                                {/* <label className=\"form-check-label\">\r\n                                                <input type=\"checkbox\" className=\"form-check-input\"/>\r\n                                                <small>Remember Me</small>\r\n                                                </label> */}       \r\n                                                { !loginResult.state && <div style={{float: \"left\"}}><p className=\"info-message negative\">{loginResult.message}</p></div>}              \r\n                                                <button type=\"submit\" style={{width : \"76.05px\"}}  className=\"btn btn-login\">Login</button>          \r\n                                            </div>                        \r\n                                            <div style={{textAlign : \"right\"}}>\r\n                                                <button className=\"btn btn-login\" style={{width : \"76.05px\", margin: \"7px 0 0 0\"}} \r\n                                                onClick={(e) => {\r\n                                                    login('guest');\r\n                                                }}>Guest</button>\r\n                                            </div>\r\n                                        </form>\r\n                                    )\r\n                                }}    \r\n                                </Formik>\r\n                                <div className=\"copy-text\">Created with <i className=\"fa fa-heart\"></i> by Jskim</div>\r\n                            </div>\r\n                            <div className=\"col-md-8 banner-sec\">\r\n                                <Carousel>\r\n                                    <div className=\"carousel-item active\">\r\n                                        <img className=\"d-block img-fluid\" src=\"https://static.pexels.com/photos/33972/pexels-photo.jpg\" alt=\"First slide\" style={{filter : \"brightness(65%)\"}}/>\r\n                                        <div className=\"carousel-caption d-md-block\">\r\n                                            <div className=\"banner-text\">\r\n                                                <h2>WEB Developer</h2>\r\n                                                <p style={{ textAlign :\"left\"}}>\r\n                                                    Web Frontend & Backend 개발자 김종성's Blog<br/><br/>\r\n                                                    저의 Blog의 방문해주신 것을 환영합니다.<br/>\r\n                                                    처음 오신분은 Guest로 입장해주시기 바랍니다.\r\n                                                </p>                                                \r\n                                            </div>\t\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"carousel-item active\">\r\n                                    <img className=\"d-block img-fluid\" src=\"https://images.pexels.com/photos/7097/people-coffee-tea-meeting.jpg\" alt=\"First slide\" style={{filter : \"brightness(65%)\"}}/>\r\n                                        <div className=\"carousel-caption d-md-block\">\r\n                                            <div className=\"banner-text\">\r\n                                                <h2>Go-Ahead</h2>\r\n                                                <p style={{ textAlign :\"left\"}}>\r\n                                                    WEB Study를 위한 Blog입니다.<br/>\r\n                                                    Developped by <br/>\r\n                                                    <span style={{padding: \"0 0 0 20px\"}}>Nest.js, React, Mysql, Nginx, Docker, jenkins</span>\r\n                                                </p>\r\n                                            </div>\t\r\n                                        </div>\r\n                                    </div>\r\n                                </Carousel>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginView\r\n","import axios from 'axios';\r\nimport qs from 'qs'\r\naxios.defaults.withCredentials = true\r\n\r\nconst HTTP_METHOD = {\r\n    GET: 'GET',\r\n    POST: 'POST',\r\n    PUT: 'PUT',\r\n    DELETE: 'DELETE',\r\n}\r\n\r\nconst getConfig = (method, path, data) => {\r\n    let url = `/api/v1${path}`;\r\n\r\n    let timeout = process.env.REACT_APP_API_TIMEOUT\r\n    let _method = new String(method);\r\n    if (_method && _method.toUpperCase() === 'POST' && url.indexOf('upload') === 0) {\r\n        timeout = 120000\r\n    }\r\n\r\n    let config = {\r\n        timeout: timeout,\r\n        method: _method.toUpperCase(),\r\n        url,\r\n        headers: {\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Access-Control-Allow-Methods': 'GET, POST, PATCH, PUT, DELETE, OPTIONS',\r\n            'Access-Control-Allow-Headers': 'Origin, Content-Type',\r\n            'Accept': 'application/json',\r\n            'Accept-Language': 'ko_KR',\r\n            'Transaction-Key': Date.now()\r\n        }\r\n    }\r\n\r\n    if (data) {\r\n        if (config.method === HTTP_METHOD.GET) {\r\n            url = url + (url.indexOf('?') > 0 ? '&' : '?') + qs.stringify(data);\r\n            config.url = url;\r\n        } else {\r\n            config.data = data;\r\n        }\r\n    }\r\n    return config\r\n}\r\n\r\nconst request = async (method, path, data) => {\r\n\r\n    try {\r\n        const {result} = await axiosRequest(method, path, data);\r\n        return {result};\r\n    } catch (error) {\r\n        if (error.statusCode == 401) {  //AccessToken 만료 시 refresh\r\n            return await refresh(methods, path, data);\r\n        } else {\r\n            return error;\r\n        }\r\n    }\r\n}\r\n\r\nconst refresh = async (methods, path, data) => {\r\n    const {result, error} = await refresh_N_reReq(method, path, data); //재발급 및 재요청\r\n    if (error) {\r\n        window.location.href = '/accounts/login';\r\n    } else {\r\n        return {result};\r\n    }\r\n}\r\n\r\nconst refresh_N_reReq = (method, path, data) => {\r\n    const {error} = axiosRequest('get', '/auth/refresh', undefined);\r\n    if (error) {    //RefreshToken도 만료 됨\r\n        return {result: null, error};\r\n    } else {        //AccessToken 재발급 후 재 request 요청\r\n        return axiosRequest(method, path, data);\r\n    }\r\n}\r\n\r\nconst axiosRequest = (method, path, data) => {\r\n    const config = getConfig(method, path, data);\r\n    const promise = axios(config);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        promise\r\n            .then((response) => {\r\n                console.log(response);\r\n                resolve({result: response.data});\r\n            })\r\n            .catch((error) => {\r\n                if (typeof error.response.data == 'string') {\r\n                    window.location.href = '/error'\r\n                }\r\n                reject({error: error.response.data});\r\n            })\r\n    })\r\n}\r\n\r\nexport default request;","import { axios } from 'libs/index';\r\nimport { useGlobalContext } from 'contexts/GlobalContext'\r\n\r\nclass LoginService {\r\n    login(params: any) {\r\n        return axios('POST', '/auth/login', params);\r\n    }\r\n    logout(params: any) {\r\n        return axios('POST', '/auth/logout', params);\r\n    }\r\n    guestLogin(params: any) {\r\n        return axios('POST', '/auth/login/guest', params);\r\n    }\r\n    guestLogout(params: any) {\r\n        return axios('POST', '/auth/logout/guest', params);\r\n    }\r\n}\r\n\r\nexport default new LoginService();\r\n"],"sourceRoot":""}